plugins {
	id 'com.diffplug.blowdryer'
	id 'com.diffplug.spotless-changelog'
}

spotlessChangelog {
	changelogFile 'CHANGES.md'
}
apply from: 干.file('base/changelog.gradle')
apply from: 干.file('spotless/freshmark.gradle')

apply plugin: 'java-gradle-plugin'
sourceCompatibility = '1.8'
targetCompatibility = '1.8'

repositories {
	mavenCentral()
}

dependencies {
	// misc
	compile 'com.diffplug.durian:durian-core:1.2.0'
	compile 'com.diffplug.durian:durian-collect:1.2.0'
	compile 'com.diffplug.durian:durian-io:1.2.0'
	// svg
	compile 'org.apache.xmlgraphics:batik-rasterizer:1.11'
	compile 'org.apache.xmlgraphics:batik-codec:1.11'
	// testing
	testCompile 'junit:junit:4.12'
	testCompile 'org.assertj:assertj-core:3.13.2'
}

test {
	testLogging {
		exceptionFormat = 'full'
	}
}

apply plugin: 'eclipse'
eclipse {
	classpath {
		downloadSources true
		downloadJavadoc true
	}
	project.file.withXml { provider ->
		Node filteredResources = provider.asNode().appendNode('filteredResources')
		Node filter = filteredResources.appendNode('filter')
		filter.appendNode('id', '1093830624')
		filter.appendNode('name', '')
		filter.appendNode('type', '10')
		Node matcher = filter.appendNode('matcher')
		matcher.appendNode('id', 'org.eclipse.ui.ide.multiFilter')
		matcher.appendNode('arguments', '1.0-name-matches-false-false-build')
	}
}
// always create fresh projects
tasks.eclipse.dependsOn(cleanEclipse)
// with up-to-date test deps
tasks.eclipse.dependsOn(pluginUnderTestMetadata)

////////////
// FORMAT //
////////////
apply plugin: 'com.diffplug.gradle.spotless'
spotless {
	java {
		target 'src/main/java/**/*.java', 'src/test/java/**/*.java'
		licenseHeaderFile	'gradle/spotless.license.java'		// License header file
		importOrderFile		'gradle/spotless.importorder'		// An import ordering file, exported from Eclipse
		eclipse().configFile'gradle/spotless.eclipseformat.xml'	// XML file dumped out by the Eclipse formatter
		removeUnusedImports()
	}
	format 'misc', {
		target '.gitignore', '*.gradle', '.ci/*.sh'
		indentWithTabs()
		trimTrailingWhitespace()
		endWithNewline()
	}
}

// we'll want the findbugs annotations (they don't have a 3.0.1 version)
dependencies {
	compile 'com.google.code.findbugs:annotations:3.0.0'
	compile 'com.google.code.findbugs:jsr305:3.0.0'
}



//	options.linksOffline('https://docs.oracle.com/javase/8/docs/api/', 'gradle/javadoc/java8')
//	options.linksOffline("https://docs.gradle.org/${gradle.gradleVersion}/javadoc/", 'gradle/javadoc/gradle')
//	options.linksOffline("https://diffplug.github.io/durian/javadoc/1.2.0}/", 'gradle/javadoc/durian')

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

//			id = 'com.diffplug.gradle.image-grinder'
//			displayName = 'ImageGrinder'
//			description = "Image manipulation for Gradle"
// plugins {
// 	imageGrinderPlugin {
// 		tags = ['image', 'svg', 'png']
// 	}
// }
