/*
 * Copyright (C) 2020-2021 DiffPlug
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.diffplug.gradle.imagegrinder;


import java.io.File;
import java.io.Serializable;
import java.util.Objects;
import java.util.Random;
import javax.inject.Inject;
import org.gradle.api.Action;
import org.gradle.api.DefaultTask;
import org.gradle.api.file.DirectoryProperty;
import org.gradle.api.file.FileSystemOperations;
import org.gradle.api.file.RegularFileProperty;
import org.gradle.api.provider.Property;
import org.gradle.api.tasks.CacheableTask;
import org.gradle.api.tasks.Input;
import org.gradle.api.tasks.InputDirectory;
import org.gradle.api.tasks.OutputDirectory;
import org.gradle.api.tasks.PathSensitive;
import org.gradle.api.tasks.PathSensitivity;
import org.gradle.api.tasks.TaskAction;
import org.gradle.workers.WorkAction;
import org.gradle.workers.WorkParameters;
import org.gradle.workers.WorkQueue;
import org.gradle.workers.WorkerExecutor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * See [README.md](https://github.com/diffplug/image-grinder) for usage instructions.
 * 
 * ## Tedious thing #1: Worker bypass
 * 
 * Worker requires that all arguments to its worker runnables ({@link ImageGrinderTask}
 * in this case) be Serializable.  There's no way to serialize our {@link #grinder(Action)}, so we had
 * to use {@link SerializableRef} to sneakily pass our task to the worker.
 */
@CacheableTask
public abstract class ImageGrinderTask extends DefaultTask {
	private final WorkerExecutor workerExecutor;

	@Inject
	public ImageGrinderTask(WorkerExecutor workerExecutor) {
		this.workerExecutor = workerExecutor;
	}

	@PathSensitive(PathSensitivity.RELATIVE)
	@InputDirectory
	public abstract DirectoryProperty getSrcDir();

	@OutputDirectory
	public abstract DirectoryProperty getDstDir();

	@Input
	Serializable bumpThisNumberWhenTheGrinderChanges = new NeverUpToDateBetweenRuns();

	static class NeverUpToDateBetweenRuns extends LazyForwardingEquality<Integer> {
		private static final long serialVersionUID = 1L;
		private static final Random RANDOM = new Random();

		@Override
		protected Integer calculateState() throws Exception {
			return RANDOM.nextInt();
		}
	}

	Action<Img<?>> grinder;

	public void grinder(Action<Img<?>> grinder) {
		this.grinder = grinder;
	}

	@Inject
	public abstract FileSystemOperations getFs();

	@TaskAction
	public void performAction() throws Exception {
		Objects.requireNonNull(grinder, "grinder");
		getFs().delete(deleteSpec -> deleteSpec.delete(getDstDir()));

		WorkQueue queue = workerExecutor.noIsolation();
		getSrcDir().get().getAsFileTree().visit(fileVisit -> {
			logger.info("render: " + fileVisit.getRelativePath());
			queue.submit(RenderSvg.class, params -> {
				params.getSourceFile().set(fileVisit.getFile());
				params.getTaskRef().set(SerializableRef.create(ImageGrinderTask.this));
			});
		});
		queue.await();
	}

	public interface RenderSvgParams extends WorkParameters {
		RegularFileProperty getSourceFile();

		Property<SerializableRef<ImageGrinderTask>> getTaskRef();
	}

	public static abstract class RenderSvg implements WorkAction<RenderSvgParams> {
		@Override
		public void execute() {
			File sourceFile = getParameters().getSourceFile().get().getAsFile();
			ImageGrinderTask task = getParameters().getTaskRef().get().value();
			Subpath subpath = Subpath.from(task.getSrcDir().getAsFile().get(), sourceFile);
			Img<?> img;
			switch (subpath.extension()) {
			case "svg":
				ParsedSVG parsed = ParsedSVG.parse(sourceFile);
				img = new Img<ParsedSVG>(task, subpath, parsed) {
					@Override
					protected void renderPng(File file, Size size) throws Exception {
						parsed.renderPng(file, size);
					}
				};
				break;
			default:
				throw new IllegalArgumentException("Can only handle svg, not " + subpath);
			}
			task.grinder.execute(img);
		}
	}

	/////////////////////////////////////
	// Autogenerated getters / setters //
	/////////////////////////////////////
	public Serializable getBumpThisNumberWhenTheGrinderChanges() {
		return bumpThisNumberWhenTheGrinderChanges;
	}

	public void setBumpThisNumberWhenTheGrinderChanges(Serializable bumpThisNumberWhenTheGrinderChanges) {
		this.bumpThisNumberWhenTheGrinderChanges = bumpThisNumberWhenTheGrinderChanges;
	}

	private static final Logger logger = LoggerFactory.getLogger(ImageGrinderTask.class);
}
