/*
 * Copyright 2017 DiffPlug
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.diffplug.gradle.imagegrinder;

import java.io.File;
import java.io.Serializable;
import java.util.Objects;
import java.util.Random;

import javax.inject.Inject;

import org.gradle.api.Action;
import org.gradle.api.DefaultTask;
import org.gradle.api.tasks.Input;
import org.gradle.api.tasks.InputDirectory;
import org.gradle.api.tasks.Internal;
import org.gradle.api.tasks.OutputDirectory;
import org.gradle.api.tasks.TaskAction;
import org.gradle.api.tasks.incremental.IncrementalTaskInputs;
import org.gradle.workers.IsolationMode;
import org.gradle.workers.WorkerExecutor;

import com.diffplug.common.collect.HashMultimap;
import com.diffplug.spotless.LazyForwardingEquality;

public class ImageGrinderTask extends DefaultTask {
	private final WorkerExecutor workerExecutor;

	@Inject
	public ImageGrinderTask(WorkerExecutor workerExecutor) {
		this.workerExecutor = workerExecutor;
	}

	@InputDirectory
	File srcDir;

	@OutputDirectory
	File dstDir;

	@Input
	Serializable bumpThisNumberWhenTheGrinderChanges = new NeverUpToDateBetweenRuns();

	static class NeverUpToDateBetweenRuns extends LazyForwardingEquality<Integer> {
		private static final long serialVersionUID = 1L;
		private static final Random RANDOM = new Random();

		@Override
		protected Integer calculateState() throws Exception {
			return RANDOM.nextInt();
		}
	}

	@Internal
	Action<Img<?>> grinder;

	public void grinder(Action<Img<?>> grinder) {
		this.grinder = grinder;
	}

	@TaskAction
	public void performAction(IncrementalTaskInputs inputs) throws Exception {
		Objects.requireNonNull(srcDir, "srcDir");
		Objects.requireNonNull(dstDir, "dstDir");
		Objects.requireNonNull(grinder, "grinder");

		File cache = new File(getProject().getBuildDir(), "cache" + getName());
		if (!inputs.isIncremental()) {
			getProject().delete(dstDir);
			map = HashMultimap.create();
		} else {
			readFromCache(cache);
		}
		inputs.outOfDate(outOfDate -> {
			workerExecutor.submit(ProcessFile.class, workerConfig -> {
				workerConfig.setIsolationMode(IsolationMode.NONE);
				workerConfig.setParams(SerializableRef.create(ImageGrinderTask.this), outOfDate.getFile());
			});
		});
		inputs.removed(removed -> {
			synchronized (map) {
				map.removeAll(removed.getFile()).forEach(getProject()::delete);
			}
		});
		workerExecutor.await();
		writeToCache(cache);
	}

	@Internal
	HashMultimap<File, File> map;

	@SuppressWarnings("unchecked")
	private void readFromCache(File file) {
		if (file.exists()) {
			map = HashMultimap.create();
		} else {
			map = SerializableMisc.fromFile(HashMultimap.class, file);
		}
	}

	private void writeToCache(File file) {
		FileMisc.mkdirs(file.getParentFile());
		SerializableMisc.toFile(map, file);
	}

	public static class ProcessFile implements Runnable {
		final ImageGrinderTask task;
		final File sourceFile;

		@Inject
		public ProcessFile(SerializableRef<ImageGrinderTask> taskRef, File sourceFile) {
			this.task = taskRef.value();
			this.sourceFile = sourceFile;
		}

		@Override
		public void run() {
			Subpath subpath = Subpath.from(task.srcDir, sourceFile);
			Img<?> img;
			switch (subpath.extension()) {
			case "svg":
				ParsedSVG parsed = ParsedSVG.parse(sourceFile);
				img = new Img<ParsedSVG>(task, subpath, parsed) {
					@Override
					protected void renderPng(File file, Size size) throws Exception {
						parsed.renderPng(file, size);
					}
				};
				break;
			default:
				throw new IllegalArgumentException("Can only handle svg, not " + subpath);
			}
			task.grinder.execute(img);
		}
	}

	/////////////////////////////////////
	// Autogenerated getters / setters //
	/////////////////////////////////////
	public File getSrcDir() {
		return srcDir;
	}

	public void setSrcDir(File srcDir) {
		this.srcDir = srcDir;
	}

	public File getDstDir() {
		return dstDir;
	}

	public void setDstDir(File dstDir) {
		this.dstDir = dstDir;
	}

	public Serializable getBumpThisNumberWhenTheGrinderChanges() {
		return bumpThisNumberWhenTheGrinderChanges;
	}

	public void setBumpThisNumberWhenTheGrinderChanges(Serializable bumpThisNumberWhenTheGrinderChanges) {
		this.bumpThisNumberWhenTheGrinderChanges = bumpThisNumberWhenTheGrinderChanges;
	}
}
